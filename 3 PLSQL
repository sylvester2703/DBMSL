DROP TABLE IF EXISTS FINE;
DROP TABLE IF EXISTS BORROWER;

CREATE TABLE BORROWER(
 roll_no INT PRIMARY KEY,
 name VARCHAR(50),
 date_of_issue DATE,
 name_of_book VARCHAR(50),
 status CHAR(1));

INSERT INTO BORROWER (
roll_no, name, date_of_issue, name_of_book, status)
VALUES
(1, 'SWARAJ', '2025-02-09', 'AI', 'R'),
(2, 'SYLVESTER', '2025-09-01', 'HCI', 'I'),
(3, 'NIDHI', '2025-07-08', 'DBMS', 'I'),
(4, 'ATHARVA', '2025-08-21', 'WT', 'I'),
(5, 'AVANI', '2025-09-06', 'SQL', 'I');

CREATE TABLE FINE (
 roll_no INT NOT NULL,
 Date DATE,
 AMT INT,
 FOREIGN KEY (roll_no) REFERENCES BORROWER(roll_no)
);
DELIMITER //
DROP PROCEDURE IF EXISTS RETURN_BOOK;
CREATE PROCEDURE RETURN_BOOK (IN ROLL INT, IN B_NAME VARCHAR(50))
BEGIN
    DECLARE L_DATE DATE;
    DECLARE FIN INT DEFAULT 0;
    DECLARE DAYS INT DEFAULT 0;
    DECLARE BOOK_STATUS CHAR(1);
   
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
        SELECT 'Error: Unable to process return. Please check input or database.' AS ERROR_MESSAGE;
        ROLLBACK;
    END;

    START TRANSACTION;

    -- Get issue date and status
    SELECT date_of_issue, status INTO L_DATE, BOOK_STATUS
    FROM BORROWER
    WHERE roll_no = ROLL AND name_of_book = B_NAME;

    IF BOOK_STATUS IS NULL THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'No matching issued book found for given roll number and book name.';
    END IF;

    IF BOOK_STATUS = 'R' THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Book already returned.';
    END IF;

    SET DAYS = DATEDIFF(CURDATE(), L_DATE);

    IF DAYS > 15 AND DAYS <= 30 THEN
        SET FIN = (DAYS - 15) * 5;
    ELSEIF DAYS > 30 THEN
        SET FIN = (15 * 5) + ((DAYS - 30) * 50);
    ELSE
        SET FIN = 0;
    END IF;

    UPDATE BORROWER
    SET status = 'R'
    WHERE roll_no = ROLL AND name_of_book = B_NAME;

    IF FIN > 0 THEN
        INSERT INTO FINE(roll_no, Date, AMT) VALUES (ROLL, CURDATE(), FIN);
    END IF;

    COMMIT;

    SELECT DAYS AS Days_Borrowed, FIN AS Fine_Amount, 'Book Returned Successfully' AS Status_Message;
END //

DELIMITER ;
CALL RETURN_BOOK(2, 'HCI');
CALL RETURN_BOOK(3, 'DBMS');
